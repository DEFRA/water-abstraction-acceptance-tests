name: CI

on: push

jobs:
  build:
    # You must use a Linux environment when using service containers or container jobs
    runs-on: ubuntu-latest

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Checkout repository
        uses: actions/checkout@v3

      # Before we do anything, check we haven't accidentally left any `describe.only()` or `it.only(` statements in the
      # tests
      #
      # Reworking of https://stackoverflow.com/a/21788642/6117745
      - name: Temporary tag check
        run: |
          ! grep -R 'describe.only(\|it.only(' cypress/e2e/

      # Gets the version to use by referring to the previous step
      - name: Install Node
        uses: actions/setup-node@v3
        with:
          node-version-file: ".nvmrc"

      # Speeds up workflows by reading the node modules from cache. Obviously you need to run it at least once, and the
      # cache will be updated should the package-lock.json file change
      - name: Cache Node modules
        uses: actions/cache@v3
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-

      # Performs a clean installation of all dependencies in the `package.json` file
      # For more information, see https://docs.npmjs.com/cli/ci.html
      - name: Install dependencies
        run: npm ci

      # Run linting first. No point running the tests if there is a linting issue
      - name: Run lint check
        run: |
          npm run lint

      # We don't have unit tests in this project. We also can't access the service as its hidden behind a VPN. Instead
      # we run a special CI test to confirm we haven't broken being able to run the project
      - name: Run unit tests
        run: |
          npm run cy:run:ci
